@page "/Play/{mode}"
@page "/Play"
@inject NavigationManager UriHelper
@using VisNetwork.Blazor.Models
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage

<body>
        
   
    @if (clicked)
    {
    <div class="modal is-active">
    <div class="modal-background"></div>
    
        
        <div class="modal-content">
           
                <footer class="card-footer">
                    @foreach(string xy in GlobalValues.Instance.clicked_label_list) {
                    <a class="card-footer-item" @onclick="() => disableModal(xy)">@xy</a>
                }
                </footer>
            
        
        
    </div>
</div>
}
@if (starterrorvalue)
{
<div class="modal is-active">
    <div class="modal-background"></div>


    <div class="modal-content">


        <div class="notification is-danger">
            <button class="delete" @onclick="starterror"></button>
            <div class="has-text-centered">2. Zustand auswählen</div>
        </div>


    </div>
</div>
}
@if (spoilerwon)
{
    <div class="modal is-active">
        <div class="modal-background"></div>


        <div class="modal-content">

           
            <div class="notification is-link">
                <button class="delete" @onclick="GoToIndex"></button>
                <div class="has-text-centered">Spoiler hat gewonnen</div>
            </div>
           

        </div>
    </div>
}


<Div Background="Background.Dark">
                     <div id="navbarBasicExample" class="navbar-menu">
                         <div class="navbar-start">
                    <button class="button is-medium is-warning navbar-item" @onclick="GoToIndex">Change Game Mode</button>
                    <div class="navbar-item has-dropdown is-hoverable">
                    <a class="navbar-link has-text-white">
          Settings
        </a>
                        <div class="navbar-dropdown">
                    <Slider class="navbar-item" @bind-Value="@nodecount" Min="1" Max="30" @onchange="nodeChange" />
                        <Div class="navbar-item">Nodes:@nodecount</Div>
                        <Slider class="navbar-item" @bind-Value="@transitioncountper" Min="1" Max="20" @onchange="nodeChange" />
                        <Div class="navbar-item">Transitions:@transitioncountper</Div>
                     
                        <Slider class="navbar-item " @bind-Value="@alpcount" Min="0" Max="24" @onchange="nodeChange" />
                      
                        <Div class="navbar-item">Alphabet:@alpcount</Div>
                    </div>
                    </div>
                    <button class="button is-medium" @onclick="@(()=>  UriHelper.NavigateTo(UriHelper.Uri, forceLoad:true))">NEW LTS</button>
                    </div>
                    </div>

        <Div class="turns" style="position: fixed;
    top: 0;
    
    right: 0;
">
                    <h1 class="title has-text-white">Spoiler</h1>
            <table class="table">
                        <thead>
                            <tr>
                                <th><abbr title="Turn">Turn</abbr></th>
                                <th><abbr title="From">From</abbr></th>
                                <th><abbr title="To">To</abbr></th>
                                <th><abbr title="Label">Label</abbr></th>


                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var turn in turnList)
                            {
                                <tr>
                                    <th>@turn.turnid</th>
                                    <td>@turn.from</td>
                                    <td>@turn.to</td>
                                    <td>@turn.label</td>
                                </tr>
                            }
                            
                        </tbody>
                    </table>
                     </Div>

        <Div class="turns" style="position: fixed;
    top: 50%;

    right: 0;
">
            <h1 class="title has-text-white">Duplicator</h1>
            <table class="table">
                <thead>
                    <tr>
                        <th><abbr title="Turn">Turn</abbr></th>
                        <th><abbr title="From">From</abbr></th>
                        <th><abbr title="To">To</abbr></th>
                        <th><abbr title="Label">Label</abbr></th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var turn in turnListD)
                    {
                        <tr>
                            <th>@turn.turnid</th>
                            <td>@turn.from</td>
                            <td>@turn.to</td>
                            <td>@turn.label</td>
                        </tr>
                    }

                </tbody>
            </table>
        </Div>
            
       
        
       
    <Animate Animation="Animations.ZoomOut" Delay="TimeSpan.FromSeconds(0.5)" Easing="Easings.EaseIn">
            <Network style="width: 100%;
                     height: 600px;"Id="my-id" Data="@data" class="vis-network-container" OnSelectNode="GetSelectedNodes" @ref="network" Options="ConstructionOptions" />
    </Animate>
    <Animate Animation="Animations.ZoomOut" Delay="TimeSpan.FromSeconds(0.5)" Easing="Easings.EaseIn">
            <Network style="width: 100%;
                     height: 600px;"Id="second" Data="@data2" class="vis-network-container" OnSelectNode="GetSelectedNodes2" @ref="network2" Options="ConstructionOptions" />
    </Animate>
</Div>

</body>
@code {

    [Parameter]
    public string mode { get; set; }

    private NetworkData data;
    private NetworkData data2;
    private Network network;
    private Network network2;
    private string selectedNodes;
    public bool spoilerwon = false;
    private int startgo = 0;
    private int startgo2 = 0;
    public string turndid="";
    public int states;
    public bool start = true;
    public bool clickedwholething = false;
    public bool clicked = false;
    bool spoiler_ai = false;
    bool duplicator_ai = false;
    int spoilerstratnet;
    bool starterrorvalue = false;
    int wnetwork;
    int states1;
    int states2;
    int chosennet;
    bool switc = true;
    bool possible = false;
    bool flag = false;
    int nodecount = 3;
    int transitioncount = 5;
    int transitioncountper = 3;
    int alpcount = 3;
    string duplicatorvalue{ get; set; } = "button is-primary";
    int globalturn = 1;
    int globalturnD = 1;
    List<Turn> turnList = new List<Turn>();
    List<Turn> turnListD = new List<Turn>();

    protected override async Task OnInitializedAsync()
    {
        nodecount = sessionStorage.GetItem<int>("count") ;
        transitioncountper = sessionStorage.GetItem<int>("transper");
        alpcount = sessionStorage.GetItem<int>("alp");
      

        if (mode == "spoiler")
        {
            duplicator_ai = true;
        }
        if (mode == "duplicator")
        {
            spoiler_ai = true;
            switc = false;
        }
        GlobalValues.Instance.nodes = new List<Node>();
        GlobalValues.Instance.edges = new List<Edge>();
        GlobalValues.Instance.nodes2 = new List<Node>();
        GlobalValues.Instance.edges2 = new List<Edge>();
        GlobalValues.Instance.tmp_dest = new List<int>();
        GlobalValues.Instance.tmp_dest2 = new List<int>();
        GlobalValues.Instance.clicked_label_list = new List<string>();





        states1 =  createLTS(GlobalValues.Instance.nodes, GlobalValues.Instance.edges);
        states2 =  createLTS(GlobalValues.Instance.nodes2, GlobalValues.Instance.edges2, states1);



        states = states1 + states2;

        GlobalValues.Instance.array = new int[states, states];
        GlobalValues.Instance.array_old = new int[states, states];

        GlobalValues.Instance.spoiler = new Tuple<int, int>[states, states];
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                GlobalValues.Instance.spoiler[i, j] = Tuple.Create(999, 999);
                GlobalValues.Instance.array[i, j] = 1;
                GlobalValues.Instance.array_old[i, j] = 0;
            }
        }



        calculateStrategy();





        data = new NetworkData
            {
                Edges = GlobalValues.Instance.edges,
                Nodes = GlobalValues.Instance.nodes
            };





        data2 = new NetworkData
            {
                Edges = GlobalValues.Instance.edges2,
                Nodes = GlobalValues.Instance.nodes2
            };
        StateHasChanged();
    }
    public class Turn
    {
        public string turnid { get; set; }
        public string from { get; set; }
        public string to { get; set; }
        public string label{ get; set; }
    } 
    private void GoToIndex()
    {
        UriHelper.NavigateTo("/");
    }


    private void nodeChange()
    {
        sessionStorage.SetItem("count", nodecount);
        sessionStorage.SetItem("transper", transitioncountper);
        sessionStorage.SetItem("alp", alpcount);
       
    }

    private void starterror()
    {
        starterrorvalue = false;
    }

    private async Task spoilerTurn()
    {
        string alphabet = "abcdefghijklmopqrstuvwxyz";
        Tuple<int, int> value1;
        int secondElement;
        string tmpa = "";
        string tmpxt = "";
        var tmpxf = ""; ;
        possible = false;
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if ((GlobalValues.Instance.tmp_node == i || GlobalValues.Instance.tmp_node == j) && (GlobalValues.Instance.tmp_node2 == i || GlobalValues.Instance.tmp_node2 == j))
                {
                    var value3 = GlobalValues.Instance.spoiler[i, j];
                    // if there is a strategy
                    if (value3.Item2 != 999)
                    {


                        value1 = GlobalValues.Instance.spoiler[i, j];
                        secondElement = value1.Item2;
                        foreach (Edge x in GlobalValues.Instance.edges)
                        {
                            if ((x.From == i.ToString() || x.From == j.ToString()) && (x.To == secondElement.ToString()))
                            {
                                GlobalValues.Instance.clicked_label = alphabet[value1.Item1].ToString();
                                GlobalValues.Instance.tmp_node = Int16.Parse(x.To);
                                if (secondElement < states1) { await network.SelectNodes(new[] { secondElement.ToString() }); }

                                var newTurn = new Turn { turnid = globalturn.ToString(), from = x.From, to = x.To, label = GlobalValues.Instance.clicked_label };
                                globalturn++;
                                turnList.Add(newTurn);
                                StateHasChanged();

                                spoilerstratnet = 1;
                                foreach (Edge y in GlobalValues.Instance.edges2)
                                {
                                    if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                                    {
                                        possible = true;

                                    }
                                }
                                if (possible)
                                {

                                    return;
                                }
                                else
                                {
                                    spoilerwon = true;

                                    return;
                                }
                            }
                        }
                        foreach (Edge x in GlobalValues.Instance.edges2)
                        {
                            if ((x.From == i.ToString() || x.From == j.ToString()) && (x.To == secondElement.ToString()))
                            {
                                GlobalValues.Instance.clicked_label = alphabet[value1.Item1].ToString();
                                if (secondElement > states1) { await network2.SelectNodes(new[] { secondElement.ToString() }); }

                                var newTurn = new Turn { turnid = globalturn.ToString(), from = x.From, to = x.To, label = GlobalValues.Instance.clicked_label };
                                globalturn++;
                                turnList.Add(newTurn);
                                StateHasChanged();

                                GlobalValues.Instance.tmp_node2 = Int16.Parse(x.To);
                                spoilerstratnet = 2;
                                foreach (Edge y in GlobalValues.Instance.edges)
                                {
                                    if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                                    {

                                        possible = true;

                                    }
                                }
                                if (possible)
                                {
                                    return;
                                }
                                else
                                {
                                    spoilerwon = true;

                                    return;
                                }

                            }
                        }

                    }
                    else
                    {
                        foreach (Edge x in GlobalValues.Instance.edges)
                        {
                            if (x.From == i.ToString() || x.From == j.ToString())
                            {
                                tmpa = x.Label;

                                tmpxt = x.To;
                                tmpxf = x.From;
                            }
                        }
                        foreach (Edge x in GlobalValues.Instance.edges2)
                        {
                            if (x.From == i.ToString() || x.From == j.ToString())
                            {
                                tmpa = x.Label;

                                tmpxt = x.To;
                                tmpxf = x.From;

                            }
                        }
                    }

                }
            }
        }
        if (Int16.Parse(tmpxt) < states1)
        {
            GlobalValues.Instance.clicked_label = tmpa;
            GlobalValues.Instance.tmp_node = Int16.Parse(tmpxt);
            spoilerstratnet = 1;
            await network.SelectNodes(new[] { tmpxt.ToString() });

            var newTurn = new Turn { turnid = globalturn.ToString(), from = tmpxf, to = tmpxt, label = GlobalValues.Instance.clicked_label };
            globalturn++;
            turnList.Add(newTurn);
            StateHasChanged();

            foreach (Edge y in GlobalValues.Instance.edges2)
            {
                if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                {
                    possible = true;

                }
            }
            if (!possible)
            {

                spoilerwon = true;

            }

            StateHasChanged();
        }
        else
        {
            GlobalValues.Instance.clicked_label = tmpa;
            GlobalValues.Instance.tmp_node2 = Int16.Parse(tmpxt);
            spoilerstratnet = 2;
            await network2.SelectNodes(new[] { tmpxt.ToString() });
            var newTurn = new Turn { turnid = globalturn.ToString(), from = tmpxf, to = tmpxt, label = GlobalValues.Instance.clicked_label };
            globalturn++;
            turnList.Add(newTurn);
            StateHasChanged();
            foreach (Edge y in GlobalValues.Instance.edges)
            {
                if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                {
                    possible = true;

                }
            }
            if (!possible)
            {

                spoilerwon = true;

            }

            StateHasChanged();
        }
    }
    private async Task disableModal(string clickedlabel)
    {
        GlobalValues.Instance.clicked_label = clickedlabel;

        if (wnetwork == 1) { 
            possible = false;
            clicked = false;
            var result = await network.GetSelectedNodes();
            var selNode = string.Concat(result);
            GlobalValues.Instance.clicked_label_list.Clear();

            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {


                    var tmp_from = GlobalValues.Instance.tmp_node.ToString();
                    GlobalValues.Instance.tmp_node = Int16.Parse(selNode);

                    switc = false;
                    chosennet = 1;
                    if (duplicator_ai)
                    {
                        await duplicatorTurn();

                    }
                    foreach (Edge y in GlobalValues.Instance.edges2)
                    {
                        if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                        {
                            possible = true;

                        }
                    }
                    if (possible)
                    {
                        var newTurn = new Turn { turnid = globalturn.ToString(), from = tmp_from, to = selNode, label = GlobalValues.Instance.clicked_label };
                        globalturn++;
                        turnList.Add(newTurn);
                        return;
                    }
                    else
                    {
                        spoilerwon = true;

                        return;
                    }
                    return;
                }


            }
            Console.WriteLine("error nicht erlaubt");
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
        }
        if (wnetwork == 2)
        {
            possible = false;
            clicked = false;
            var result = await network2.GetSelectedNodes();
            var selNode = string.Concat(result);
            GlobalValues.Instance.clicked_label_list.Clear();

            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {


                    var tmp_from = GlobalValues.Instance.tmp_node2.ToString();
                    GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
                    switc = false;

                    chosennet = 2;
                    if (duplicator_ai)
                    {
                        await duplicatorTurn();

                    }
                    foreach (Edge y in GlobalValues.Instance.edges)
                    {
                        if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                        {
                            possible = true;

                        }
                    }
                    if (possible)
                    {
                        var newTurn = new Turn { turnid = globalturn.ToString(), from = tmp_from, to = selNode, label = GlobalValues.Instance.clicked_label };
                        globalturn++;
                        turnList.Add(newTurn);
                        return;
                    }
                    else
                    {
                        spoilerwon = true;

                        return;
                    }
                    return;
                }


            }
            Console.WriteLine("error nicht erlaubt");
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
        }

    }


    public async Task duplicatorTurn()
    {
        flag = false;
        string temporary = "";
        string temporaryF = "";
        if (wnetwork==1){

            foreach (Edge x in GlobalValues.Instance.edges2) 
            {
                if (Int16.Parse(x.From) == GlobalValues.Instance.tmp_node2)
                {
                    if (x.Label == GlobalValues.Instance.clicked_label)
                    {
                        temporary = x.To;
                        temporaryF = x.From;
                        flag = true;

                    }
                    for (int k = 0; k < GlobalValues.Instance.final_classes.Count; k++)
                    {
                        if (GlobalValues.Instance.final_classes[k].Contains(GlobalValues.Instance.tmp_node) && GlobalValues.Instance.final_classes[k].Contains(Int16.Parse(x.To)))
                        {
                            if (x.Label == GlobalValues.Instance.clicked_label)
                            {
                                await network2.SelectNodes(new[] { x.To.ToString() });

                                flag = false;
                                switc = true;
                                var newTurn = new Turn { turnid = globalturnD.ToString(), from = x.From.ToString(), to = x.To.ToString(), label = GlobalValues.Instance.clicked_label };
                                globalturnD++;
                                turnListD.Add(newTurn);
                                GlobalValues.Instance.tmp_node2 = Int16.Parse(x.To);
                                return;
                            }
                        }
                    }


                }
            }
            if (flag)
            {
                await network2.SelectNodes(new[] { temporary });
                var newTurn = new Turn { turnid = globalturnD.ToString(), from = temporaryF, to = temporary.ToString(), label = GlobalValues.Instance.clicked_label };
                globalturnD++;
                turnListD.Add(newTurn);
                GlobalValues.Instance.tmp_node2 = Int16.Parse(temporary);
                switc = true;
                flag = false;
            }
            else
            {
                Console.WriteLine("Spoiler hat gewonnen");
                spoilerwon = true;
            }

            flag = false;
        }
        if (wnetwork == 2)
        {

            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (Int16.Parse(x.From) == GlobalValues.Instance.tmp_node)
                {
                    if (x.Label == GlobalValues.Instance.clicked_label)
                    {
                        temporary = x.To;
                        flag = true;

                    }
                    for (int k = 0; k < GlobalValues.Instance.final_classes.Count; k++)
                    {
                        if (GlobalValues.Instance.final_classes[k].Contains(GlobalValues.Instance.tmp_node2) && GlobalValues.Instance.final_classes[k].Contains(Int16.Parse(x.To)))
                        {
                            if (x.Label == GlobalValues.Instance.clicked_label)
                            {
                                await network.SelectNodes(new[] { x.To.ToString() });
                                var newTurn = new Turn { turnid = globalturnD.ToString(), from = x.From.ToString(), to = x.To.ToString(), label = GlobalValues.Instance.clicked_label };
                                globalturnD++;
                                turnListD.Add(newTurn);
                                GlobalValues.Instance.tmp_node = Int16.Parse(x.To);
                                switc = true;
                                flag = false;
                                return;
                            }
                        }
                    }


                }
            }
            if (flag)
            {
                await network.SelectNodes(new[] { temporary.ToString() });
                var newTurn = new Turn { turnid = globalturnD.ToString(), from = temporaryF, to = temporary.ToString(), label = GlobalValues.Instance.clicked_label };
                globalturnD++;
                turnListD.Add(newTurn);
                GlobalValues.Instance.tmp_node = Int16.Parse(temporary);
                switc = true;
                flag = false;
            }
            else
            {
                Console.WriteLine("Spoiler hat gewonnen");
                spoilerwon = true;
            }

            flag = false;
        }

    }



    private async Task GetSelectedNodes(ClickEvent eventArg)
    {
        var result = await network.GetSelectedNodes();
        var edge = await network.GetSelectedEdges();
        var test2 = string.Concat(string.Join(",", edge));
        var selNode = string.Concat(result);
        wnetwork = 1;
        if (startgo== 0)
        {
            startgo = 1;

            GlobalValues.Instance.tmp_node = Int16.Parse(selNode);

            //spoiler ai
            if (startgo == 1 && startgo2 == 1 && spoiler_ai == true)
            {
                spoilerTurn();
                startgo = 2;
            }
            //
            return;
        }

        //both conditions
        if(startgo2==0){
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
            starterrorvalue = true;
            return;
        }
        //

        if (switc)
        {
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {

                    GlobalValues.Instance.clicked_label_list.Add(x.Label);

                }

            }
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {

                    clicked = true;
                    return;
                }

            }
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
            GlobalValues.Instance.clicked_label_list.Clear();
        }else{
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode) && x.Label == GlobalValues.Instance.clicked_label)
                {


                    if (spoiler_ai && spoilerstratnet==2)
                    {
                        GlobalValues.Instance.tmp_node = Int16.Parse(selNode);

                      
                        var newTurnn = new Turn { turnid = globalturnD.ToString(), from = x.From, to = selNode, label = GlobalValues.Instance.clicked_label };
                        globalturnD++;
                        turnListD.Add(newTurnn);

                        spoilerTurn();
                        return;
                    }
                    else if (spoiler_ai)
                    {
                        await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
                        return;
                    }
                    if (chosennet == 1)
                    {
                        await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
                        return;
                    }


                    switc = true;

                    var newTurn = new Turn { turnid = globalturnD.ToString(), from = GlobalValues.Instance.tmp_node.ToString(), to = selNode, label = GlobalValues.Instance.clicked_label };
                    globalturnD++;
                    turnListD.Add(newTurn);

                    GlobalValues.Instance.tmp_node = Int16.Parse(selNode);
                    return;
                }

            }
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
        }









        // Node i = GlobalValues.Instance.nodes[Int16.Parse(selectedNodes)];

        // i.Chosen = true;


        /* await network.SetOptions(new NetworkOptions{
        * 
        Nodes = new NodeOption
        {
        Color = new NodeColorType
        {
        Background = "red"
        }
        }
        });*/
        // i.Color= new NodeColorType { Background = "red" };
        //   await network.Redraw();
        // await network.SetOptions(ConstructionOptions);
        // await network.SetData(data);



    }
    private async Task GetSelectedNodes2(ClickEvent eventArg)
    {

        var result = await network2.GetSelectedNodes();
        var edge = await network2.GetSelectedEdges();
        var test2 = string.Concat(string.Join(",", edge));
        var selNode = string.Concat(result);
        wnetwork = 2;
        if (startgo2 == 0)
        {
            startgo2 = 1;

            GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
            if (startgo == 1 && startgo2 == 1 && spoiler_ai == true)
            {
                spoilerTurn();
                startgo = 2;
            }
            return;
        }
        if (startgo == 0)
        {
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
            starterrorvalue = true;
            return;
        }
        if (switc)
        {
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {

                    GlobalValues.Instance.clicked_label_list.Add(x.Label);

                }

            }
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {

                    clicked = true;
                    return;
                }

            }
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
            GlobalValues.Instance.clicked_label_list.Clear();
        }
        else
        {
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode) && x.Label == GlobalValues.Instance.clicked_label)
                {


                    if (spoiler_ai && spoilerstratnet==1)
                    {
                        GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);

                        var newTurnn = new Turn { turnid = globalturnD.ToString(), from = x.From, to = selNode, label = GlobalValues.Instance.clicked_label };
                        globalturnD++;
                        turnListD.Add(newTurnn);

                        spoilerTurn();
                        return;
                    }else if(spoiler_ai){
                        await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
                        return;
                    }
                    if (chosennet == 2)
                    {
                        await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
                        return;
                    }
                    

                    switc = true;
                    var newTurn = new Turn { turnid = globalturnD.ToString(), from = GlobalValues.Instance.tmp_node2.ToString(), to = selNode, label = GlobalValues.Instance.clicked_label };
                    globalturnD++;
                    turnListD.Add(newTurn);
                    GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
                    return;
                }

            }
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
        }




    }

    public int createLTS(List<Node> nodes, List<Edge> edges,int startvalue=0)
    {

        string alphabet = "abcdefghijklmopqrstuvwxyz";
        Random rnd = new Random();
        int states = nodecount;
        int alph = alpcount;
       
        GlobalValues.Instance.array = new int[states,states];

        for (int i = 0 + startvalue; i < states + startvalue; i++)
        {

            nodes.Add(new Node(i.ToString(), string.Concat("Node",i), i, "circle"));
        }
        foreach (Node i in nodes)
        {
            //  i. = new NodeColorType.BorderBackgroundColor { Border = "green" };
            List<int> tmp = new List<int>();
            int maxk = rnd.Next(transitioncountper+1);
            for(int j = 0; j < maxk; j++)
            {
                int rnd_alph = rnd.Next(0, alph);
                int rnd_to = rnd.Next(1+startvalue, states+startvalue);
                if (tmp.Contains(rnd_to)) { continue; }
                tmp.Add(rnd_to);
                edges.Add(new Edge((i.Id).ToString(), rnd_to.ToString()) { From = (i.Id).ToString(), To = rnd_to.ToString(),Id =(i.Id).ToString() + "-" + rnd_to.ToString(), Label = alphabet[rnd_alph].ToString(), Arrows = new Arrows { To = new ArrowsOptions { Enabled = true } } });
               
            }
        }

        return states;
    }
    private void calculateStrategy()
    {

        while (!checkEqual()){

            for (int i = 0; i < states; i++)
            {
                for (int j = 0; j < states; j++)
                {

                    GlobalValues.Instance.array_old[i,j] = GlobalValues.Instance.array[i,j];

                }
            }

            List<List<int>> classes = getClasses();
            for (int i = 0; i < states; i++)
            {
                for (int j = 0; j < states; j++)
                {
                    if (GlobalValues.Instance.array_old[i, j] == 1)
                    {
                        for (int k = 0; k < classes.Count; k++)
                        {
                            for (int a = 0; a < 25; a++)
                            {
                                List<int> succI = GetSuccsessorsByLabel(i, a);
                                List<int> succII = GetSuccsessorsByLabel(j, a);
                                List<int> classBisim = classes[k];

                                IEnumerable<int> tmpI = succI.Intersect(classBisim);
                                IEnumerable<int> tmpII = succII.Intersect(classBisim);
                                if (tmpI.Count() == 0 && tmpII.Count() > 0)
                                {
                                    List<int> asList = tmpII.ToList();
                                    int tmp2 = asList[0];
                                    GlobalValues.Instance.spoiler[i, j] = Tuple.Create( a, tmp2);
                                    GlobalValues.Instance.array[i, j] = 0;
                                    GlobalValues.Instance.array[j, i] = 0;
                                    k = classes.Count;
                                    a = 25;

                                }
                                else if (tmpI.Count() > 0 && tmpII.Count() == 0)
                                {
                                    List<int> asList = tmpI.ToList();
                                    int tmp1 = asList[0];
                                    GlobalValues.Instance.spoiler[i,j] = Tuple.Create(a, tmp1);
                                    GlobalValues.Instance.array[i, j] = 0;
                                    GlobalValues.Instance.array[j, i] = 0;
                                    k = classes.Count;
                                    a = 25;
                                }
                            }
                        }

                    }
                }
            }
        }

    }
    private List<int> GetSuccsessorsByLabel(int i, int a)
    {

        List<int> tmp = new List<int>();
        string alph = "abcdefghijklmnopqrstuvwxyz";
        foreach (Edge x in GlobalValues.Instance.edges)
            if (x.From == i.ToString())
            {
                if (x.Label == alph[a].ToString())
                {
                    tmp.Add(Int16.Parse(x.To));
                }
            } 
        foreach (Edge x in GlobalValues.Instance.edges2)
            if (x.From == i.ToString())
            {
                if (x.Label == alph[a].ToString())
                {
                    tmp.Add(Int16.Parse(x.To));
                }
            }
        return tmp;
    }
    private Boolean checkEqual()
    {
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if (GlobalValues.Instance.array[i,j] != GlobalValues.Instance.array_old[i,j])
                {
                    return false;
                }
            }
        }
        return true;
    }
    private List<List<int>> getClasses()
    {
        List<List<int>> classes = new List<List<int>>();
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if (i != j){
                    if (GlobalValues.Instance.array_old[i, j] == 1)
                    {
                        if (classes.Count == 0)
                        {
                            List<int> tmp = new List<int>();
                            tmp.Add(i);
                            tmp.Add(j);
                            classes.Add(tmp);
                        }
                        else
                        {

                            int c = 0;
                            int classCount = classes.Count;
                            Boolean flag = false;
                            while (c < classCount)
                            {

                                if (classes[c].Contains(i))
                                {
                                    if (!classes[c].Contains(j))
                                    {
                                        classes[c].Add(j);
                                    }
                                    flag = true;
                                }
                                else if (classes[c].Contains(j))
                                {
                                    if (!classes[c].Contains(i))
                                    {
                                        classes[c].Add(i);
                                    }
                                    flag = true;
                                }
                                c++;
                            }
                            if (!flag)
                            {


                                List<int> tmp = new List<int>();
                                tmp.Add(i);
                                if (i != j) tmp.Add(j);
                                classes.Add(tmp);
                                c = classCount;
                            }
                        }

                    }
                }
            }
        }


        GlobalValues.Instance.final_classes = classes;
      
        return classes;
    }
    private NetworkOptions ConstructionOptions(Network network)
    {
        return new NetworkOptions
            {
                AutoResize = true,
                ClickToUse = true,
                Height = "100%",

                Nodes = new NodeOption

                {

                    BorderWidth = 0,
                    Color = new NodeColorType
                    {
                        Highlight = new NodeColorType.BorderBackgroundColor
                        {
                            Background = "red"
                        },
                    }
                },
                Interaction = new InteractionOptions
                {
                    //Selectable = false,
                    //DragNodes = false,

                }

            };
    }

    public class GlobalValues
    {
        private static GlobalValues instance;
        public int alphabet { get; set; }
        public List<int>[,] LTS { get; set; }
        public List<Node> nodes { get; set; }
        public List<Edge> edges { get; set; }
        public List<int> tmp_dest { get; set; }
        public int tmp_node{ get; set; }
        public int tmp_node2 { get; set; }
        public List<List<int>> final_classes{ get; set; }
        public List<Node> nodes2 { get; set; }
        public string clicked_label { get; set; }
        public List<string> clicked_label_list { get; set; }
        public List<Edge> edges2 { get; set; }
        public List<int> tmp_dest2 { get; set; }
        public int[,] array { get; set; }
        public int[,] array_old { get; set; }
        public Tuple<int, int>[,] spoiler { get; set; }
        private GlobalValues()
        {

        }

        public static GlobalValues Instance
        {
            get
            {
                if (instance == null)
                    instance = new GlobalValues();
                return instance;
            }
        }
    }

}