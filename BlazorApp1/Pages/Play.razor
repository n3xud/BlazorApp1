@page "/Play/{Value}"
@inject NavigationManager UriHelper
@using VisNetwork.Blazor.Models


<body>
    @if(spoiler_ai){
        <div class="notification is-danger  my-0 py-0">
            @turndid
            
        </div>
    }
    @if (clicked)
    {
    <div class="modal is-active">
    <div class="modal-background"></div>
    
        
        <div class="modal-content">
           
                <footer class="card-footer">
                    @foreach(string xy in GlobalValues.Instance.clicked_label_list) {
                    <a class="card-footer-item" @onclick="() => disableModal(xy)">@xy</a>
                }
                </footer>
            
        
        
    </div>
</div>
}
@if (starterrorvalue)
{
<div class="modal is-active">
    <div class="modal-background"></div>


    <div class="modal-content">


        <div class="notification is-danger">
            <button class="delete" @onclick="starterror"></button>
            <div class="has-text-centered">2. Zustand auswählen</div>
        </div>


    </div>
</div>
}
@if (spoilerwon)
{
    <div class="modal is-active">
        <div class="modal-background"></div>


        <div class="modal-content">

           
            <div class="notification is-link">
                <button class="delete" @onclick="finished"></button>
                <div class="has-text-centered">Spoiler hat gewonnen</div>
            </div>
           

        </div>
    </div>
}
@if (start && Value=="ai")
{
    <section class="hero is-large is-link my-0 py-0">
        <div class="hero-body">
            <div class="container">
         
                <Animate Animation="Animations.Fade" Delay="TimeSpan.FromSeconds(0.3)">
                    <div class="columns  is-mobile is-centered is-multiline ">
                        <div class="column is-narrow">
                            <button class="button is-primary is-large " @onclick="playasspoiler">Play as Spoiler</button>
                        </div>
                        <div class="column is-narrow">
                            <button class="button is-primary button is-large" @onclick="playasduplicator">Play as Duplicator</button>
                        </div>
                    </div>
                </Animate>
            </div>
        </div>
    </section>
    
}
else
{
    start = false;
    clickedwholething = true;
}
@if(clickedwholething){
<Div Background="Background.Dark">
    <button class="button is-medium is-warning " @onclick="GoToIndex">Change Game Mode</button>    
    <Animate Animation="Animations.ZoomOut" Delay="TimeSpan.FromSeconds(0.5)" Easing="Easings.EaseIn">
    <Network Id="my-id" Data="@data" class="vis-network-container" OnSelectNode="GetSelectedNodes" @ref="network" Options="ConstructionOptions"  />
    </Animate>
    <Animate Animation="Animations.ZoomOut" Delay="TimeSpan.FromSeconds(0.5)" Easing="Easings.EaseIn">
    <Network Id="second" Data="@data2" class="vis-network-container" OnSelectNode="GetSelectedNodes2" @ref="network2" Options="ConstructionOptions" />
    </Animate>
</Div>
}
</body>
@code {

    [Parameter]
    public string Value { get; set; }

    private NetworkData data;
    private NetworkData data2;
    private Network network;
    private Network network2;
    private string selectedNodes;
    public bool spoilerwon = false;
    private int startgo = 0;
    private int startgo2 = 0;
    public string turndid="";
    public int states;
    public bool start = true;
    public bool clickedwholething = false;
    public bool clicked = false;
    bool spoiler_ai = false;
    bool duplicator_ai = false;
    int spoilerstratnet;
    bool starterrorvalue = false;
    int wnetwork;
    int states1;
    int states2;
    int chosennet;
    bool switc = true;
    bool possible = false;
    bool flag = false;
    string duplicatorvalue{ get; set; } = "button is-primary";

    private TaskCompletionSource<bool> buttonClickedTaskCompletionSource;

    private void GoToIndex()
    {
        UriHelper.NavigateTo("/");
    }
    private void finished()
    {
        UriHelper.NavigateTo("/");
    }
    private void playasspoiler()
    {
        duplicator_ai = true;
        start = false;
        clickedwholething = true;
        //player selects 2 states
        //player does his first move network and network2 have to register his move
        //spoiler state is saved
        //duplicator calculates is next move based on spoilers move

    }
    private void starterror()
    {
        starterrorvalue = false;
    }
    private async Task playasduplicator()
    {
        spoiler_ai= true;
        switc = false;
        clickedwholething = true;
        start = false;
    }
    private async Task spoilerTurn()
    {
        string alphabet = "abcdefghijklmopqrstuvwxyz";
        Tuple<int, int> value1;
        int secondElement;
        string tmpa = "";
        string tmpxt = "";
        possible = false;
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if ((GlobalValues.Instance.tmp_node == i || GlobalValues.Instance.tmp_node == j) && (GlobalValues.Instance.tmp_node2 == i || GlobalValues.Instance.tmp_node2 == j))
                {
                    var value3 = GlobalValues.Instance.spoiler[i, j];
                    var test12345 = value3.Item2;
                    if (test12345 != 999)
                    {


                        value1 = GlobalValues.Instance.spoiler[i, j];
                        secondElement = value1.Item2;
                        foreach (Edge x in GlobalValues.Instance.edges)
                        {
                            if ((x.From == i.ToString() || x.From == j.ToString()) && (x.To == secondElement.ToString()))
                            {
                                GlobalValues.Instance.clicked_label = alphabet[value1.Item1].ToString();
                                GlobalValues.Instance.tmp_node = Int16.Parse(x.To);
                                if (secondElement < states1) { await network.SelectNodes(new[] { secondElement.ToString() }); }
                                Console.WriteLine(secondElement+" sec ");
                                turndid = x.To + " " + GlobalValues.Instance.clicked_label;
                                StateHasChanged();
                                spoilerstratnet = 1;
                                foreach (Edge y in GlobalValues.Instance.edges2)
                                {
                                    if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                                    {
                                        possible = true;

                                    }
                                }
                                if (possible)
                                {
                                    return;
                                }
                                else
                                {
                                    spoilerwon = true;

                                    return;
                                }
                            }
                        }
                        foreach (Edge x in GlobalValues.Instance.edges2)
                        {
                            if ((x.From == i.ToString() || x.From == j.ToString()) && (x.To == secondElement.ToString()))
                            {
                                GlobalValues.Instance.clicked_label = alphabet[value1.Item1].ToString();
                                GlobalValues.Instance.tmp_node2 = Int16.Parse(x.To);
                                if (secondElement > states1) { await network2.SelectNodes(new[] { secondElement.ToString() }); }
                                turndid = x.To + " " + GlobalValues.Instance.clicked_label;
                                StateHasChanged();
                                spoilerstratnet = 2;
                                foreach (Edge y in GlobalValues.Instance.edges)
                                {
                                    if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                                    {
                                        possible = true;

                                    }
                                }
                                if (possible)
                                {
                                    return;
                                }
                                else
                                {
                                    spoilerwon = true;

                                    return;
                                }

                            }
                        }

                    }
                    else
                    {
                        foreach (Edge x in GlobalValues.Instance.edges)
                        {
                            if (x.From == i.ToString() || x.From == j.ToString())
                            {
                                tmpa = x.Label;

                                tmpxt = x.To;

                            }
                        }
                        foreach (Edge x in GlobalValues.Instance.edges2)
                        {
                            if (x.From == i.ToString() || x.From == j.ToString())
                            {
                                tmpa = x.Label;

                                tmpxt = x.To;

                            }
                        }
                    }

                }
            }
        }
        if (Int16.Parse(tmpxt) < states1)
        {
            GlobalValues.Instance.clicked_label = tmpa;
            GlobalValues.Instance.tmp_node = Int16.Parse(tmpxt);
            spoilerstratnet = 1;
            await network.SelectNodes(new[] { tmpxt.ToString() });
            foreach (Edge y in GlobalValues.Instance.edges2)
            {
                if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                {
                    possible = true;

                }
            }
            if (!possible)
            {

                spoilerwon = true;

            }
            turndid = tmpxt + " " + GlobalValues.Instance.clicked_label;
            StateHasChanged();
        }
        else
        {
            GlobalValues.Instance.clicked_label = tmpa;
            GlobalValues.Instance.tmp_node2 = Int16.Parse(tmpxt);
            spoilerstratnet = 2;
            await network2.SelectNodes(new[] { tmpxt.ToString() });
            foreach (Edge y in GlobalValues.Instance.edges)
            {
                if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                {
                    possible = true;

                }
            }
            if (!possible)
            {

                spoilerwon = true;

            }
            turndid = tmpxt + " " + GlobalValues.Instance.clicked_label;
            StateHasChanged();
        }
    }
    private async Task disableModal(string clickedlabel)
    {
        GlobalValues.Instance.clicked_label = clickedlabel;

        if (wnetwork == 1) { 
            possible = false;
            clicked = false;
            var result = await network.GetSelectedNodes();
            var selNode = string.Concat(result);
            GlobalValues.Instance.clicked_label_list.Clear();

            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {



                    GlobalValues.Instance.tmp_node = Int16.Parse(selNode);
                    switc = false;
                    chosennet = 1;
                    if (duplicator_ai)
                    {
                        await duplicatorTurn();

                    }
                    foreach (Edge y in GlobalValues.Instance.edges2)
                    {
                        if (y.From == GlobalValues.Instance.tmp_node2.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                        {
                            possible = true;

                        }
                    }
                    if (possible)
                    {
                        return;
                    }
                    else
                    {
                        spoilerwon = true;

                        return;
                    }
                    return;
                }


            }
            Console.WriteLine("error nicht erlaubt");
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
        }
        if (wnetwork == 2)
        {
            possible = false;
            clicked = false;
            var result = await network2.GetSelectedNodes();
            var selNode = string.Concat(result);
            GlobalValues.Instance.clicked_label_list.Clear();

            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {



                    GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
                    switc = false;
                    chosennet = 2;
                    if (duplicator_ai)
                    {
                        await duplicatorTurn();

                    }
                    foreach (Edge y in GlobalValues.Instance.edges)
                    {
                        if (y.From == GlobalValues.Instance.tmp_node.ToString() && y.Label == GlobalValues.Instance.clicked_label)
                        {
                            possible = true;

                        }
                    }
                    if (possible)
                    {
                        return;
                    }
                    else
                    {
                        spoilerwon = true;

                        return;
                    }
                    return;
                }


            }
            Console.WriteLine("error nicht erlaubt");
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
        }

    }

    public Play()
    {

        GlobalValues.Instance.nodes = new List<Node>();
        GlobalValues.Instance.edges = new List<Edge>();
        GlobalValues.Instance.nodes2 = new List<Node>();
        GlobalValues.Instance.edges2 = new List<Edge>();
        GlobalValues.Instance.tmp_dest = new List<int>();
        GlobalValues.Instance.tmp_dest2 = new List<int>();
        GlobalValues.Instance.clicked_label_list = new List<string>();

        states1 = createLTS(GlobalValues.Instance.nodes, GlobalValues.Instance.edges);
        states2 = createLTS(GlobalValues.Instance.nodes2, GlobalValues.Instance.edges2, states1);



        states = states1 + states2;

        GlobalValues.Instance.array = new int[states, states];
        GlobalValues.Instance.array_old = new int[states, states];
        Console.WriteLine(states1);
        Console.WriteLine(states2);
        Console.WriteLine(states);
        GlobalValues.Instance.spoiler = new Tuple<int, int>[states, states];
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                GlobalValues.Instance.spoiler[i, j] = Tuple.Create(999, 999); 
            }
        }

        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                GlobalValues.Instance.array[i, j] = 1;
                GlobalValues.Instance.array_old[i, j] = 0;
            }
        }

        calculateStrategy();





        data = new NetworkData
            {
                Edges = GlobalValues.Instance.edges,
                Nodes = GlobalValues.Instance.nodes
            };





        data2 = new NetworkData
            {
                Edges = GlobalValues.Instance.edges2,
                Nodes = GlobalValues.Instance.nodes2
            };


        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                Console.WriteLine(i + " " + j);

                var value3 = GlobalValues.Instance.spoiler[i, j];
                var test12345 = value3.Item2;
                Console.WriteLine(test12345);
            }
        }
    }

    public async Task duplicatorTurn()
    {
        int temporary = 0;
        if (wnetwork==1){

            foreach (Edge x in GlobalValues.Instance.edges2) 
            {
                if (Int16.Parse(x.From) == GlobalValues.Instance.tmp_node2)
                {
                    if (x.Label == GlobalValues.Instance.clicked_label)
                    {
                        temporary = Int16.Parse(x.To);
                        flag = true;

                    }
                    for (int k = 0; k < GlobalValues.Instance.final_classes.Count; k++)
                    {
                        if (GlobalValues.Instance.final_classes[k].Contains(GlobalValues.Instance.tmp_node) && GlobalValues.Instance.final_classes[k].Contains(Int16.Parse(x.To)))
                        {
                            if (x.Label == GlobalValues.Instance.clicked_label)
                            {
                                await network2.SelectNodes(new[] { x.To.ToString() });
                                GlobalValues.Instance.tmp_node2 = Int16.Parse(x.To);
                                flag = false;
                                switc = true;
                                return;
                            }
                        }
                    }


                }
            }
            if (flag)
            {
                await network2.SelectNodes(new[] { temporary.ToString() });
                GlobalValues.Instance.tmp_node2 = temporary;
                switc = true;
                flag = false;
            }
            else
            {
                Console.WriteLine("Spoiler hat gewonnen");
                spoilerwon = true;
            }

            flag = false;
        }
        if (wnetwork == 2)
        {

            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (Int16.Parse(x.From) == GlobalValues.Instance.tmp_node)
                {
                    if (x.Label == GlobalValues.Instance.clicked_label)
                    {
                        temporary = Int16.Parse(x.To);
                        flag = true;

                    }
                    for (int k = 0; k < GlobalValues.Instance.final_classes.Count; k++)
                    {
                        if (GlobalValues.Instance.final_classes[k].Contains(GlobalValues.Instance.tmp_node2) && GlobalValues.Instance.final_classes[k].Contains(Int16.Parse(x.To)))
                        {
                            if (x.Label == GlobalValues.Instance.clicked_label)
                            {
                                await network.SelectNodes(new[] { x.To.ToString() });
                                GlobalValues.Instance.tmp_node = Int16.Parse(x.To);
                                switc = true;
                                flag = false;
                                return;
                            }
                        }
                    }


                }
            }
            if (flag)
            {
                await network.SelectNodes(new[] { temporary.ToString() });
                GlobalValues.Instance.tmp_node = temporary;
                switc = true;
                flag = false;
            }
            else
            {
                Console.WriteLine("Spoiler hat gewonnen");
                spoilerwon = true;
            }

            flag = false;
        }

    }

    private async Task Check0Node()
    {
        var edge1 = await network.GetSelectedEdges();
        var result = await network.GetSelectedNodes();
        var selNode = string.Concat(result);
        var test2 = string.Concat(string.Join(",", edge1));

        string[] parts = test2.Split(',');
        List<(int, int)> partsList = new List<(int, int)>();
        /* if (!spoiler_ai)
        {
        foreach (string pair in parts)
        {
        string[] numbers = pair.Split('-');
        int firstNumber = int.Parse(numbers[0]);
        int secondNumber = int.Parse(numbers[1]);
        partsList.Add((firstNumber, secondNumber));
    }
    foreach ((int firstNumber, int secondNumber) in partsList)
        {
        if (firstNumber.ToString() == selNode)
            {
            GlobalValues.Instance.tmp_dest.Add(secondNumber);

          }

          }
          }
          */

        foreach(Edge x in GlobalValues.Instance.edges)
        {
            if(selNode == x.From)
            {
                GlobalValues.Instance.tmp_dest.Add(Int16.Parse(x.To));
            }
        }


    }
    private async Task Check2Node()
    {
        var edge1 = await network2.GetSelectedEdges();
        var result = await network2.GetSelectedNodes();
        var selNode = string.Concat(result);
        var test2 = string.Concat(string.Join(",", edge1));

        string[] parts = test2.Split(',');
        List<(int, int)> partsList = new List<(int, int)>();

        /* foreach (string pair in parts)
        {
        string[] numbers = pair.Split('-');
        int firstNumber = int.Parse(numbers[0]);
        int secondNumber = int.Parse(numbers[1]);
        partsList.Add((firstNumber, secondNumber));
    }
    foreach ((int firstNumber, int secondNumber) in partsList)
        {
        if (firstNumber.ToString() == selNode)
            {
            GlobalValues.Instance.tmp_dest2.Add(secondNumber);

        }

        }

        */
        foreach (Edge x in GlobalValues.Instance.edges2)
        {
            if (selNode == x.From && x.Label == GlobalValues.Instance.clicked_label)
            {
                GlobalValues.Instance.tmp_dest2.Add(Int16.Parse(x.To));
            }
        }


    }

    private async Task GetSelectedNodes(ClickEvent eventArg)
    {
        var result = await network.GetSelectedNodes();
        var edge = await network.GetSelectedEdges();
        var test2 = string.Concat(string.Join(",", edge));
        var selNode = string.Concat(result);
        wnetwork = 1;
        if (startgo== 0)
        {
            startgo = 1;

            GlobalValues.Instance.tmp_node = Int16.Parse(selNode);
            if (startgo == 1 && startgo2 == 1 && spoiler_ai == true)
            {
                spoilerTurn();
                startgo = 2;
            }
            return;
        }
        if(startgo2==0){
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
            starterrorvalue = true;
            return;
        }
        if (switc)
        {
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {

                    GlobalValues.Instance.clicked_label_list.Add(x.Label);

                }

            }
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode))
                {

                    clicked = true;
                    return;
                }

            }
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
            GlobalValues.Instance.clicked_label_list.Clear();
        }else{
            foreach (Edge x in GlobalValues.Instance.edges)
            {
                if (x.From == GlobalValues.Instance.tmp_node.ToString() && (x.To == selNode) && x.Label == GlobalValues.Instance.clicked_label)
                {


                    if (spoiler_ai && spoilerstratnet==2)
                    {
                        spoilerTurn();
                        return;
                    }
                    else if (spoiler_ai)
                    {
                        await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
                        return;
                    }
                    if (chosennet == 1)
                    {
                        await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
                        return;
                    }
                    GlobalValues.Instance.tmp_node = Int16.Parse(selNode);
                   
                    switc = true;
                    return;
                }

            }
            await network.SelectNodes(new[] { GlobalValues.Instance.tmp_node.ToString() });
        }









        // Node i = GlobalValues.Instance.nodes[Int16.Parse(selectedNodes)];

        // i.Chosen = true;


        /* await network.SetOptions(new NetworkOptions{
        * 
        Nodes = new NodeOption
        {
        Color = new NodeColorType
        {
        Background = "red"
        }
        }
        });*/
        // i.Color= new NodeColorType { Background = "red" };
        //   await network.Redraw();
        // await network.SetOptions(ConstructionOptions);
        // await network.SetData(data);



    }
    private async Task GetSelectedNodes2(ClickEvent eventArg)
    {

        var result = await network2.GetSelectedNodes();
        var edge = await network2.GetSelectedEdges();
        var test2 = string.Concat(string.Join(",", edge));
        var selNode = string.Concat(result);
        wnetwork = 2;
        if (startgo2 == 0)
        {
            startgo2 = 1;

            GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
            if (startgo == 1 && startgo2 == 1 && spoiler_ai == true)
            {
                spoilerTurn();
                startgo = 2;
            }
            return;
        }
        if (startgo == 0)
        {
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
            starterrorvalue = true;
            return;
        }
        if (switc)
        {
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {

                    GlobalValues.Instance.clicked_label_list.Add(x.Label);

                }

            }
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode))
                {

                    clicked = true;
                    return;
                }

            }
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
            GlobalValues.Instance.clicked_label_list.Clear();
        }
        else
        {
            foreach (Edge x in GlobalValues.Instance.edges2)
            {
                if (x.From == GlobalValues.Instance.tmp_node2.ToString() && (x.To == selNode) && x.Label == GlobalValues.Instance.clicked_label)
                {


                    if (spoiler_ai && spoilerstratnet==1)
                    {
                        spoilerTurn();
                        return;
                    }else if(spoiler_ai){
                        await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
                        return;
                    }
                    if (chosennet == 2)
                    {
                        await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
                        return;
                    }
                    GlobalValues.Instance.tmp_node2 = Int16.Parse(selNode);
                    
                    switc = true;
                    return;
                }

            }
            await network2.SelectNodes(new[] { GlobalValues.Instance.tmp_node2.ToString() });
        }




    }

    public int createLTS(List<Node> nodes, List<Edge> edges,int startvalue=0)
    {

        string alphabet = "abcdefghijklmopqrstuvwxyz";
        Random rnd = new Random();
        int states = rnd.Next(2,5);
        int alph = rnd.Next(1,5);
        //GlobalValues.Instance.alphabet
        GlobalValues.Instance.array = new int[states,states];

        for (int i = 0 + startvalue; i < states + startvalue; i++)
        {
          
            nodes.Add(new Node(i.ToString(), string.Concat("Node",i), i, "circle"));
        }
        foreach (Node i in nodes)
        {
            //  i. = new NodeColorType.BorderBackgroundColor { Border = "green" };
            List<int> tmp = new List<int>();

            for(int j = 0; j < 3; j++)
            {
                int rnd_alph = rnd.Next(0, alph);
                int rnd_to = rnd.Next(1+startvalue, states+startvalue);
                if (tmp.Contains(rnd_to)) { continue; }
                tmp.Add(rnd_to);
                edges.Add(new Edge((i.Id).ToString(), rnd_to.ToString()) { From = (i.Id).ToString(), To = rnd_to.ToString(),Id =(i.Id).ToString() + "-" + rnd_to.ToString(), Label = alphabet[rnd_alph].ToString(), Arrows = new Arrows { To = new ArrowsOptions { Enabled = true } } });
               
            }
        }

        return states;
    }
    private void calculateStrategy()
    {

        while (!checkEqual()){

            for (int i = 0; i < states; i++)
            {
                for (int j = 0; j < states; j++)
                {

                    GlobalValues.Instance.array_old[i,j] = GlobalValues.Instance.array[i,j];

                }
            }

            List<List<int>> classes = getClasses();
            for (int i = 0; i < states; i++)
            {
                for (int j = 0; j < states; j++)
                {
                    if (GlobalValues.Instance.array_old[i, j] == 1)
                    {
                        for (int k = 0; k < classes.Count; k++)
                        {
                            for (int a = 0; a < 25; a++)
                            {
                                List<int> succI = GetSuccsessorsByLabel(i, a);
                                List<int> succII = GetSuccsessorsByLabel(j, a);
                                List<int> classBisim = classes[k];

                                IEnumerable<int> tmpI = succI.Intersect(classBisim);
                                IEnumerable<int> tmpII = succII.Intersect(classBisim);
                                if (tmpI.Count() == 0 && tmpII.Count() > 0)
                                {
                                    List<int> asList = tmpII.ToList();
                                    int tmp2 = asList[0];
                                    GlobalValues.Instance.spoiler[i, j] = Tuple.Create( a, tmp2);
                                    GlobalValues.Instance.array[i, j] = 0;
                                    GlobalValues.Instance.array[j, i] = 0;
                                    k = classes.Count;
                                    a = 25;

                                }
                                else if (tmpI.Count() > 0 && tmpII.Count() == 0)
                                {
                                    List<int> asList = tmpI.ToList();
                                    int tmp1 = asList[0];
                                    GlobalValues.Instance.spoiler[i,j] = Tuple.Create(a, tmp1);
                                    GlobalValues.Instance.array[i, j] = 0;
                                    GlobalValues.Instance.array[j, i] = 0;
                                    k = classes.Count;
                                    a = 25;
                                }
                            }
                        }

                    }
                }
            }
        }

    }
    private List<int> GetSuccsessorsByLabel(int i, int a)
    {

        List<int> tmp = new List<int>();
        string alph = "abcdefghijklmnopqrstuvwxyz";
        foreach (Edge x in GlobalValues.Instance.edges)
            if (x.From == i.ToString())
            {
                if (x.Label == alph[a].ToString())
                {
                    tmp.Add(Int16.Parse(x.To));
                }
            } 
        foreach (Edge x in GlobalValues.Instance.edges2)
            if (x.From == i.ToString())
            {
                if (x.Label == alph[a].ToString())
                {
                    tmp.Add(Int16.Parse(x.To));
                }
            }
        return tmp;
    }
    private Boolean checkEqual()
    {
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if (GlobalValues.Instance.array[i,j] != GlobalValues.Instance.array_old[i,j])
                {
                    return false;
                }
            }
        }
        return true;
    }
    private List<List<int>> getClasses()
    {
        List<List<int>> classes = new List<List<int>>();
        for (int i = 0; i < states; i++)
        {
            for (int j = 0; j < states; j++)
            {
                if (i != j){
                    if (GlobalValues.Instance.array_old[i, j] == 1)
                    {
                        if (classes.Count == 0)
                        {
                            List<int> tmp = new List<int>();
                            tmp.Add(i);
                            tmp.Add(j);
                            classes.Add(tmp);
                        }
                        else
                        {

                            int c = 0;
                            int classCount = classes.Count;
                            Boolean flag = false;
                            while (c < classCount)
                            {

                                if (classes[c].Contains(i))
                                {
                                    if (!classes[c].Contains(j))
                                    {
                                        classes[c].Add(j);
                                    }
                                    flag = true;
                                }
                                else if (classes[c].Contains(j))
                                {
                                    if (!classes[c].Contains(i))
                                    {
                                        classes[c].Add(i);
                                    }
                                    flag = true;
                                }
                                c++;
                            }
                            if (!flag)
                            {


                                List<int> tmp = new List<int>();
                                tmp.Add(i);
                                if (i != j) tmp.Add(j);
                                classes.Add(tmp);
                                c = classCount;
                            }
                        }

                    }
                }
            }
        }


        GlobalValues.Instance.final_classes = classes;
      
        return classes;
    }
    private NetworkOptions ConstructionOptions(Network network)
    {
        return new NetworkOptions
            {
                AutoResize = true,
                ClickToUse = true,
                Height = "100%",

                Nodes = new NodeOption

                {

                    BorderWidth = 0,
                    Color = new NodeColorType
                    {
                        Highlight = new NodeColorType.BorderBackgroundColor
                        {
                            Background = "red"
                        },
                    }
                },
                Interaction = new InteractionOptions
                {
                    //Selectable = false,
                    //DragNodes = false,

                }

            };
    }

    public class GlobalValues
    {
        private static GlobalValues instance;
        public int alphabet { get; set; }
        public List<int>[,] LTS { get; set; }
        public List<Node> nodes { get; set; }
        public List<Edge> edges { get; set; }
        public List<int> tmp_dest { get; set; }
        public int tmp_node{ get; set; }
        public int tmp_node2 { get; set; }
        public List<List<int>> final_classes{ get; set; }
        public List<Node> nodes2 { get; set; }
        public string clicked_label { get; set; }
        public List<string> clicked_label_list { get; set; }
        public List<Edge> edges2 { get; set; }
        public List<int> tmp_dest2 { get; set; }
        public int[,] array { get; set; }
        public int[,] array_old { get; set; }
        public Tuple<int, int>[,] spoiler { get; set; }
        private GlobalValues()
        {

        }

        public static GlobalValues Instance
        {
            get
            {
                if (instance == null)
                    instance = new GlobalValues();
                return instance;
            }
        }
    }

}